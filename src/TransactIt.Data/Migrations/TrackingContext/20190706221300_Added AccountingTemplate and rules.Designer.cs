// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TransactIt.Data.Contexts;

namespace TransactIt.Data.Migrations.TrackingContext
{
    [DbContext(typeof(TransactIt.Data.Contexts.TrackingContext))]
    [Migration("20190706221300_Added AccountingTemplate and rules")]
    partial class AddedAccountingTemplateandrules
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview6.19304.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TransactIt.Domain.Entities.AccountingEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<int>("FinancialTransactionId");

                    b.Property<int>("LedgerAccountId");

                    b.Property<int>("Side");

                    b.HasKey("Id");

                    b.HasIndex("FinancialTransactionId");

                    b.HasIndex("LedgerAccountId");

                    b.ToTable("AccountingEntries");
                });

            modelBuilder.Entity("TransactIt.Domain.Entities.AccountingTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("DefaultFinancialTransactionDescription");

                    b.Property<string>("Description");

                    b.Property<int>("LedgerId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LedgerId");

                    b.ToTable("AccountingTemplates");
                });

            modelBuilder.Entity("TransactIt.Domain.Entities.AccountingTemplateRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountingTemplateId");

                    b.Property<int>("LedgerAccountId");

                    b.Property<decimal>("Multiplier");

                    b.Property<int>("Side");

                    b.HasKey("Id");

                    b.HasIndex("AccountingTemplateId");

                    b.HasIndex("LedgerAccountId");

                    b.ToTable("AccountingTemplateRules");
                });

            modelBuilder.Entity("TransactIt.Domain.Entities.FinancialTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description");

                    b.Property<int>("IdentifyingCode");

                    b.Property<int>("LedgerId");

                    b.Property<DateTime>("TransactionDate");

                    b.HasKey("Id");

                    b.HasIndex("LedgerId");

                    b.ToTable("FinancialTransactions");
                });

            modelBuilder.Entity("TransactIt.Domain.Entities.Ledger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Ledgers");
                });

            modelBuilder.Entity("TransactIt.Domain.Entities.LedgerAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description");

                    b.Property<int>("LedgerSubAccountGroupId");

                    b.Property<string>("Name");

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.HasIndex("LedgerSubAccountGroupId", "Number")
                        .IsUnique();

                    b.ToTable("LedgerAccounts");
                });

            modelBuilder.Entity("TransactIt.Domain.Entities.LedgerMainAccountGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description");

                    b.Property<int>("LedgerId");

                    b.Property<string>("Name");

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.HasIndex("LedgerId", "Number")
                        .IsUnique();

                    b.ToTable("LedgerMainAccountGroups");
                });

            modelBuilder.Entity("TransactIt.Domain.Entities.LedgerSubAccountGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description");

                    b.Property<int>("LedgerMainAccountGroupId");

                    b.Property<string>("Name");

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.HasIndex("LedgerMainAccountGroupId", "Number")
                        .IsUnique();

                    b.ToTable("LedgerSubAccountGroups");
                });

            modelBuilder.Entity("TransactIt.Domain.Entities.AccountingEntry", b =>
                {
                    b.HasOne("TransactIt.Domain.Entities.FinancialTransaction", "FinancialTransaction")
                        .WithMany("AccountingEntries")
                        .HasForeignKey("FinancialTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransactIt.Domain.Entities.LedgerAccount", "LedgerAccount")
                        .WithMany("AccountingEntries")
                        .HasForeignKey("LedgerAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TransactIt.Domain.Entities.AccountingTemplate", b =>
                {
                    b.HasOne("TransactIt.Domain.Entities.Ledger", "Ledger")
                        .WithMany("AccountingTemplates")
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TransactIt.Domain.Entities.AccountingTemplateRule", b =>
                {
                    b.HasOne("TransactIt.Domain.Entities.AccountingTemplate", "AccountingTemplate")
                        .WithMany("AccountingTemplateRules")
                        .HasForeignKey("AccountingTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransactIt.Domain.Entities.LedgerAccount", "LedgerAccount")
                        .WithMany("AccountingTemplateRules")
                        .HasForeignKey("LedgerAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TransactIt.Domain.Entities.FinancialTransaction", b =>
                {
                    b.HasOne("TransactIt.Domain.Entities.Ledger", "Ledger")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TransactIt.Domain.Entities.LedgerAccount", b =>
                {
                    b.HasOne("TransactIt.Domain.Entities.LedgerSubAccountGroup", "LedgerSubAccountGroup")
                        .WithMany("LedgerAccounts")
                        .HasForeignKey("LedgerSubAccountGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TransactIt.Domain.Entities.LedgerMainAccountGroup", b =>
                {
                    b.HasOne("TransactIt.Domain.Entities.Ledger", "Ledger")
                        .WithMany("LedgerMainAccountGroups")
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TransactIt.Domain.Entities.LedgerSubAccountGroup", b =>
                {
                    b.HasOne("TransactIt.Domain.Entities.LedgerMainAccountGroup", "LedgerMainAccountGroup")
                        .WithMany("LedgerSubAccountGroups")
                        .HasForeignKey("LedgerMainAccountGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
